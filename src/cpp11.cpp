// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// getTautStringApprox.cpp
cpp11::list getTautStringApprox(std::vector<double> dataVec);
extern "C" SEXP _cytoUtils_getTautStringApprox(SEXP dataVec) {
  BEGIN_CPP11
    return cpp11::as_sexp(getTautStringApprox(cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(dataVec)));
  END_CPP11
}
// singleDip.cpp
double singleDip(const std::vector<double>& x);
extern "C" SEXP _cytoUtils_singleDip(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(singleDip(cpp11::as_cpp<cpp11::decay_t<const std::vector<double>&>>(x)));
  END_CPP11
}
// tsGates.cpp
std::vector<double> tsGates(const std::vector<double> xVec, int modePrior);
extern "C" SEXP _cytoUtils_tsGates(SEXP xVec, SEXP modePrior) {
  BEGIN_CPP11
    return cpp11::as_sexp(tsGates(cpp11::as_cpp<cpp11::decay_t<const std::vector<double>>>(xVec), cpp11::as_cpp<cpp11::decay_t<int>>(modePrior)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _cytoUtils_getDescendants(SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_cytoUtils_getDescendants",      (DL_FUNC) &_cytoUtils_getDescendants,      3},
    {"_cytoUtils_getTautStringApprox", (DL_FUNC) &_cytoUtils_getTautStringApprox, 1},
    {"_cytoUtils_singleDip",           (DL_FUNC) &_cytoUtils_singleDip,           1},
    {"_cytoUtils_tsGates",             (DL_FUNC) &_cytoUtils_tsGates,             2},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_cytoUtils(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
